name: Build and Release

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build-jvm:
    name: Build JVM Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '24'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon || true

      - name: Create distribution
        run: ./gradlew installDist --no-daemon

      - name: Upload JVM artifact
        uses: actions/upload-artifact@v4
        with:
          name: csak-jvm
          path: build/install/csak/
          retention-days: 7

  build-native:
    name: Build GraalVM Native Image - ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os-name: linux-x64
            artifact-name: csak-linux-x64
            binary-name: csak
          - os: macos-13
            os-name: macos-x64
            artifact-name: csak-macos-x64
            binary-name: csak
          - os: macos-14
            os-name: macos-arm64
            artifact-name: csak-macos-arm64
            binary-name: csak

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM JDK 24
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build native image
        run: ./gradlew nativeCompile --no-daemon
        env:
          JAVA_OPTS: "-Xmx4g"

      - name: Test native binary
        run: |
          ./build/native/nativeCompile/${{ matrix.binary-name }} --help
          ./build/native/nativeCompile/${{ matrix.binary-name }} --version

      - name: Create tarball (Unix)
        run: |
          cd build/native/nativeCompile
          tar -czf ${{ matrix.artifact-name }}.tar.gz ${{ matrix.binary-name }}
          shasum -a 256 ${{ matrix.artifact-name }}.tar.gz > ${{ matrix.artifact-name }}.tar.gz.sha256

      - name: Upload native binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: |
            build/native/nativeCompile/${{ matrix.artifact-name }}.tar.gz
            build/native/nativeCompile/${{ matrix.artifact-name }}.tar.gz.sha256
          retention-days: 30

  docker-jvm:
    name: Build JVM Docker Image
    runs-on: ubuntu-latest
    needs: build-jvm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build JVM Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.jvm
          push: false
          tags: csak:jvm
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-native:
    name: Build Native Docker Image
    runs-on: ubuntu-latest
    needs: build-native

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Native Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.native
          push: false
          tags: csak:native
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-jvm, build-native]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all native binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: csak-*
          path: ./artifacts
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/csak-linux-x64.tar.gz
            artifacts/csak-linux-x64.tar.gz.sha256
            artifacts/csak-macos-x64.tar.gz
            artifacts/csak-macos-x64.tar.gz.sha256
            artifacts/csak-macos-arm64.tar.gz
            artifacts/csak-macos-arm64.tar.gz.sha256
          body: |
            ## Cardano Swiss Army Knife (csak) ${{ github.ref_name }}

            ### Installation

            **Native Binary (Linux x64):**
            ```bash
            # Download and extract
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/csak-linux-x64.tar.gz
            tar -xzf csak-linux-x64.tar.gz
            chmod +x csak

            # Verify checksum
            shasum -a 256 -c csak-linux-x64.tar.gz.sha256

            # Run
            ./csak --help
            ```

            **Native Binary (macOS Intel x64):**
            ```bash
            # Download and extract
            curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/csak-macos-x64.tar.gz
            tar -xzf csak-macos-x64.tar.gz
            chmod +x csak

            # Verify checksum
            shasum -a 256 -c csak-macos-x64.tar.gz.sha256

            # Remove quarantine attribute (macOS)
            xattr -d com.apple.quarantine csak 2>/dev/null || true

            # Run
            ./csak --help
            ```

            **Native Binary (macOS Apple Silicon ARM64):**
            ```bash
            # Download and extract
            curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/csak-macos-arm64.tar.gz
            tar -xzf csak-macos-arm64.tar.gz
            chmod +x csak

            # Verify checksum
            shasum -a 256 -c csak-macos-arm64.tar.gz.sha256

            # Remove quarantine attribute (macOS)
            xattr -d com.apple.quarantine csak 2>/dev/null || true

            # Run
            ./csak --help
            ```

            **Docker (Build Locally):**
            ```bash
            # Clone repository
            git clone https://github.com/${{ github.repository }}.git
            cd cardano-swiss-army-knife

            # Build JVM Docker image
            docker build -f Dockerfile.jvm -t csak:jvm .

            # Build Native Docker image
            docker build -f Dockerfile.native -t csak:native .
            ```

            ### Platform Support

            | Platform | Architecture | Binary Size | Startup Time |
            |----------|--------------|-------------|--------------|
            | Linux | x64 | ~45 MB | < 100ms |
            | macOS | Intel x64 | ~45 MB | < 100ms |
            | macOS | Apple Silicon (ARM64) | ~45 MB | < 100ms |

            ### What's Changed
            - See commit history for details

            ### Checksums
            See `.sha256` files for SHA-256 checksums of each platform binary.

            ### Notes
            - macOS binaries may require removing the quarantine attribute: `xattr -d com.apple.quarantine csak`
            - All binaries are statically compiled GraalVM native images for optimal performance
            - No Java installation required to run the native binaries
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
